
==========================
ğŸ“¦ DOCUMENTATION : Docker - Commandes & Concepts
==========================

Ce fichier contient les commandes Docker les plus utiles pour construire, exÃ©cuter, dÃ©boguer et gÃ©rer des containers et images, avec explications et exemples pratiques.

--------------------------------------------------
ğŸ”¹ 1. Images et Dockerfile
--------------------------------------------------

# Construire une image Ã  partir du Dockerfile
docker build -t mon_image_nom .

# Utiliser un argument de build (avec ARG dans Dockerfile)
docker build --build-arg VERSION=1.0 -t mon_image:v1 .

# Lister les images disponibles
docker images

# Supprimer une image
docker rmi mon_image_nom

--------------------------------------------------
ğŸ”¹ 2. Lancer des containers
--------------------------------------------------

# ExÃ©cuter un container simple
docker run mon_image_nom

# Supprimer le container aprÃ¨s exÃ©cution (--rm)
docker run --rm mon_image_nom

# ExÃ©cuter en mode interactif (accÃ¨s shell)
docker run -it mon_image_nom

# DÃ©finir une commande diffÃ©rente de CMD
docker run mon_image_nom bash

# Monter un volume (dossier local dans le container)
docker run -v $(pwd)/data:/app/data mon_image_nom

# Rediriger un port du container vers lâ€™hÃ´te
docker run -p 8080:80 mon_image_web

# Donner un nom au container
docker run --name mon_container mon_image

--------------------------------------------------
ğŸ”¹ 3. Gestion des containers
--------------------------------------------------

# Lister les containers en cours
docker ps

# Lister tous les containers (mÃªme arrÃªtÃ©s)
docker ps -a

# ArrÃªter un container
docker stop mon_container

# Supprimer un container
docker rm mon_container

# Voir les logs dâ€™un container
docker logs mon_container

# AccÃ©der Ã  lâ€™intÃ©rieur dâ€™un container en cours
docker exec -it mon_container bash

--------------------------------------------------
ğŸ”¹ 4. Dockerfile â€“ Exemples utiles
--------------------------------------------------

FROM python:3.11-slim                    # Image de base
RUN apt-get update && apt-get install -y bash make
WORKDIR /app
COPY . /app
RUN pip install -r requirements.txt
CMD ["bash", "orchestration/pipeline_master.sh"]

# Autres options :
# ENV VARIABLE=value       -> Variable dâ€™environnement
# EXPOSE 8000              -> Documente un port utilisÃ©
# VOLUME /data             -> Marque un volume pour persistance
# LABEL version="1.0"      -> MÃ©tadonnÃ©e
# ARG VERSION              -> Variable de build

--------------------------------------------------
ğŸ”¹ 5. Nettoyage Docker (entretien)
--------------------------------------------------

# Supprimer toutes les images non utilisÃ©es
docker image prune

# Supprimer tous les containers arrÃªtÃ©s
docker container prune

# Supprimer tout (dangereux !)
docker system prune -a

--------------------------------------------------
ğŸ”¹ 6. Ressources utiles
--------------------------------------------------

Docs officielles : https://docs.docker.com/
CheatSheet : https://dockerlabs.collabnix.com/docker/cheatsheet/
Playground en ligne : https://labs.play-with-docker.com/

==========================
ğŸ“˜ Fin du fichier
==========================
